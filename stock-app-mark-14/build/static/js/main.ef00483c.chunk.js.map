{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","outputMessage","setOutputMessage","intialPrice","setIntialPrice","quantityOfStocks","setQuantityOfStocks","currentPrice","setCurrentPrice","className","setClassName","onSubmit","e","preventDefault","percentage","tempInitialPrice","tempQuantityOfStocks","tempCurrentPrice","totalInitialPrice","parseInt","totalCurrentPrice","profit","loss","handleSubmit","for","type","onChange","target","value","min","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAoEeA,MAhEf,WAEE,MAA0CC,mBAAS,iCAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCF,qBAAtC,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgDJ,qBAAhD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAAwCN,qBAAxC,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAAkCR,mBAAS,IAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAgCA,OACE,qBAAKD,UAAU,MAAf,SACE,sBAAKA,UAAaA,EAAY,aAA9B,UACE,wBAAQA,UAAY,UAApB,6CAEA,uBAAME,SAAY,SAACC,GAAD,OAlCxB,SAAsBA,GAEpBA,EAAEC,iBAEF,IAKIC,EALAC,EAAmBZ,EACnBa,EAAuBX,EACvBY,EAAmBV,EACnBW,EAAoBC,SAASH,GAAwBG,SAASJ,GAC9DK,EAAoBD,SAASH,GAAwBG,SAASF,GAElE,GAAGF,EAAmBE,EACtB,CACE,IAAII,EAASD,EAAoBF,EACjCJ,EAAcO,EAASH,EAAqB,IAC5ChB,EAAiB,sBAAwBmB,EAAS,sBAAwBF,SAASL,GAAc,KACjGJ,EAAa,gBAEV,GAAGK,EAAmBE,EAC3B,CACE,IAAIK,EAAOJ,EAAoBE,EAC/BN,EAAcQ,EAAOJ,EAAqB,IAC1ChB,EAAiB,wBAA0BoB,EAAO,oBAAsBH,SAASL,GAAc,KAC/FJ,EAAa,kBAGbI,EAAa,EACbZ,EAAiB,qBAQUqB,CAAaX,IAAtC,UACE,uBAAOY,IAAM,eAAef,UAAY,QAAxC,6BACA,uBAAOgB,KAAO,SAAShB,UAAY,QAAQiB,SAAY,SAACd,GAAD,OAAOR,EAAeQ,EAAEe,OAAOC,QAAQC,IAAM,MAEpG,uBAAOL,IAAM,qBAAqBf,UAAY,QAA9C,kCACA,uBAAOgB,KAAO,SAAShB,UAAY,QAAQiB,SAAY,SAACd,GAAD,OAAON,EAAoBM,EAAEe,OAAOC,QAAQC,IAAM,MAEzG,uBAAOL,IAAM,gBAAgBf,UAAY,QAAzC,6BACA,uBAAOgB,KAAO,SAAShB,UAAY,QAAQiB,SAAY,SAACd,GAAD,OAAOJ,EAAgBI,EAAEe,OAAOC,QAAQC,IAAM,MAErG,wBAAQJ,KAAO,SAAShB,UAAY,SAApC,yBAGF,qBAAKA,UAAY,SAAjB,SACGR,UCjDI6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ef00483c.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useState } from \"react\";\n\nfunction App() \n{\n  const [outputMessage, setOutputMessage] = useState(\"Output would be shown here...\");\n  const [intialPrice, setIntialPrice] = useState();\n  const [quantityOfStocks, setQuantityOfStocks] = useState();\n  const [currentPrice, setCurrentPrice] = useState(); \n  const [className, setClassName] = useState(\"\");\n  \n\n  function handleSubmit(e)\n  {\n    e.preventDefault();\n\n    let tempInitialPrice = intialPrice;\n    let tempQuantityOfStocks = quantityOfStocks;\n    let tempCurrentPrice = currentPrice;\n    let totalInitialPrice = parseInt(tempQuantityOfStocks) * parseInt(tempInitialPrice);\n    let totalCurrentPrice = parseInt(tempQuantityOfStocks) * parseInt(tempCurrentPrice);\n    let percentage;\n    if(tempInitialPrice < tempCurrentPrice)\n    {\n      let profit = totalCurrentPrice - totalInitialPrice;\n      percentage = (profit / totalInitialPrice) * 100;\n      setOutputMessage(\"Hey, the profit is \" + profit + \" Rs and Profit% is \" + parseInt(percentage) + \"%\");\n      setClassName(\"correct\");\n    }\n    else if(tempInitialPrice > tempCurrentPrice)\n    {\n      let loss = totalInitialPrice - totalCurrentPrice;\n      percentage = (loss / totalInitialPrice) * 100;\n      setOutputMessage(\"Oops u had a loss of \" + loss + \" Rs and loss% is \" + parseInt(percentage) + \"%\");\n      setClassName(\"incorrect\");\n    }\n    else{\n      percentage = 0;\n      setOutputMessage(\"No profit or loss\");\n    }\n  }\n  return (\n    <div className=\"App\">\n      <div className = {className + \" container\"} >\n        <header className = \"heading\">Stock Profile & Loss Calculator</header>\n\n        <form onSubmit = {(e) => handleSubmit(e)}>\n          <label for = \"intial-price\" className = \"label\">Initial Price: </label>\n          <input type = \"number\" className = \"input\" onChange = {(e) => setIntialPrice(e.target.value)} min = \"1\"></input>\n\n          <label for = \"quantity-of-stocks\" className = \"label\">Quantity of Stocks: </label>\n          <input type = \"number\" className = \"input\" onChange = {(e) => setQuantityOfStocks(e.target.value)} min = \"1\"></input>\n\n          <label for = \"current-price\" className = \"label\">Current Price: </label>\n          <input type = \"number\" className = \"input\" onChange = {(e) => setCurrentPrice(e.target.value)} min = \"0\"></input>\n\n          <button type = \"submit\" className = \"button\">Tell Me!</button>\n        </form>\n\n        <div className = \"output\">\n          {outputMessage}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}